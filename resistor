#!/bin/sh
#
# resistor - convert resistor colour code to Ohms
# Copyright (C) 2019 Artur "suve" Iwicki
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program (LICENCE.txt). If not, see <https://www.gnu.org/licenses/>.
#

colour_to_number() {
	COLOUR=`echo "$1" | tr '[:upper:]' '[:lower:]'`

	if [ "$COLOUR" == "pink" ]; then
		echo "-3"	
	elif [ "$COLOUR" == "silver" ]; then
		echo "-2"
	elif [ "$COLOUR" == "gold" ]; then
		echo "-1"
	elif [ "$COLOUR" == "black" ]; then
		echo "0"
	elif [ "$COLOUR" == "brown" ]; then
		echo "1"
	elif [ "$COLOUR" == "red" ]; then
		echo "2"
	elif [ "$COLOUR" == "orange" ]; then
		echo "3"
	elif [ "$COLOUR" == "yellow" ]; then
		echo "4"
	elif [ "$COLOUR" == "green" ]; then
		echo "5"
	elif [ "$COLOUR" == "blue" ]; then
		echo "6"
	elif [ "$COLOUR" == "violet" ] || [ "$COLOUR" == "purple" ] || [ "$COLOUR" == "magenta" ]; then
		echo "7"
	elif [ "$COLOUR" == "grey" ] || [ "$COLOUR" == "gray" ]; then
		echo "8"
	elif [ "$COLOUR" == "white" ]; then
		echo "9"
	else
		echo >&2 "Unknown colour code \"$1\""
		exit 1
	fi
}


colour_to_band() {
	BAND=`colour_to_number "$1"`

	if [ "$BAND" -lt 0 ]; then
		echo >&2 "\"$1\" can only be a multiplier band colour, not a value band colour"
		exit 1
	fi

	echo "$BAND"
}


get_csi_for_band() {
	if [ "$1" -eq "-3" ]; then
		COLOUR_CODE="175m"
	elif [ "$1" -eq "-2" ]; then
		COLOUR_CODE="249m"
	elif [ "$1" -eq "-1" ]; then
		COLOUR_CODE="186m"
	elif [ "$1" -eq "0" ]; then
		COLOUR_CODE="16m"
	elif [ "$1" -eq "1" ]; then
		COLOUR_CODE="58m"
	elif [ "$1" -eq "2" ]; then
		COLOUR_CODE="160m"
	elif [ "$1" -eq "3" ]; then
		COLOUR_CODE="166m"
	elif [ "$1" -eq "4" ]; then
		COLOUR_CODE="226m"
	elif [ "$1" -eq "5" ]; then
		COLOUR_CODE="34m"
	elif [ "$1" -eq "6" ]; then
		COLOUR_CODE="21m"
	elif [ "$1" -eq "7" ]; then
		COLOUR_CODE="128m"
	elif [ "$1" -eq "8" ]; then
		COLOUR_CODE="241m"
	elif [ "$1" -eq "9" ]; then
		COLOUR_CODE="231m"
	fi

	echo "X" | sed -e "s/X/\x1b[38;5;$COLOUR_CODE/"
}


ascii_art() {
	CSI_RESET=`echo "X" | sed -e "s/X/\x1b[0m/"`

	COL1=`get_csi_for_band "$1"`
	COL2=`get_csi_for_band "$2"`
	COL3=`get_csi_for_band "$3"`

	echo -n "  —[$COL1█$COL2█$COL3█$CSI_RESET]—  "
}


print_usage() {
	cat << EOHELP
Usage: resistor <1st band> <2nd band> <multiplier band>
EOHELP
	exit
}


if [ "$#" -lt 3 ]; then
	print_usage
fi

BND1=`colour_to_band "$1"`
BND2=`colour_to_band "$2"`
BND3=`colour_to_number "$3"`
MULT=$BND3


if [ "$MULT" -lt "-1" ]; then
	PREFIX="milli"
	MULT=`expr "$MULT" + 4`
elif [ "$MULT" -lt "2" ]; then
	PREFIX=""
	MULT=`expr "$MULT" + 1`
elif [ "$MULT" -lt "5" ]; then
	PREFIX="kilo"
	MULT=`expr "$MULT" - 2`
elif [ "$MULT" -lt "8" ]; then
	PREFIX="mega"
	MULT=`expr "$MULT" - 5`
else
	PREFIX="giga"
	MULT=`expr "$MULT" - 8`
fi

ascii_art "$BND1" "$BND2" "$BND3"
if [ "$MULT" -eq 0 ]; then
	echo "$BND1.$BND2" "$PREFIX" "Ohm"
elif [ "$MULT" -eq 1 ]; then
	echo "$BND1$BND2" "$PREFIX" "Ohm"
else
	ZERO="0"
	echo "$BND1$BND2$ZERO" "$PREFIX" "Ohm"
fi
